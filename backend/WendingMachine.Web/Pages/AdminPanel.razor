@page "/admin"
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http
@inject IJSRuntime JS
<PageTitle></PageTitle>
<PageTitle>Панель администратора</PageTitle>
<h3>AdminPanel</h3>
@if (string.IsNullOrEmpty(SecretKey))
{
    <h1>Необходимо указать ключ в строке запроса!</h1>
}
else
{
    if (coins is null || drinks is null || machines is null)
    {
        <p>Загрузка...</p>
    }
    else
    {
        <h4>Монеты</h4>
        foreach (var coin in coins)
        {
            <label>@coin.Denomination</label>
            <label>@coin.isAvailable</label>
        }
        <h4>Напитки</h4>
        <table class="table">
            <thead>
                <tr class ="fw-bold">
                    <th>Идентификатор</th>
                    <th>Название</th>
                    <th>Цена</th>
                    <th>Остаток</th>
                    <th>Доступность</th>
                    <th>Картинка</th>
                    <th>Идентификатор машины</th>
                    <th>Действия</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var drink in drinks)
                {
                    <tr >

                        <td ><strong>@drink.Id</strong></td>
                        <td >@drink.Name</td>
                        <td>@drink.Price</td>
                        <td >@drink.Count</td>
                        <td >@drink.isAvailable</td>
                        <td ><img style="max-height:150px;max-width:150px;" src="@drink.ImagePath" alt="@drink.Name" /></td>
                        <td >@drink.MachineId</td>
                        <td >
                            <button class="btn btn-info" @onclick="()=>SetDrinkForEdit(drink)">
                                Редактировать
                            </button>
                            <button class="btn btn-danger" @onclick="async()=>DeleteDrink(drink.Id)">
                                Удалить
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <h4>Машины</h4>
        foreach (var machine in machines)
        {
            <label>@machine.Id</label>
            <label>@machine.balance</label>
        }
    }
}
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string SecretKey { get; set; }
    public Coin[] coins;
    public Drink[] drinks;
    public Drink currentDrink;
    public Machine[] machines;
    protected override async Task OnInitializedAsync()
    {
        coins = await Http.GetFromJsonAsync<Coin[]>("/api/v1/Coin/coins");
        drinks = await Http.GetFromJsonAsync<Drink[]>("/api/v1/Drink/drinks");
        machines = await Http.GetFromJsonAsync<Machine[]>("/api/v1/Machine/machines");
    }
    public void SetDrinkForEdit(Drink drink)
    {
        currentDrink = drink;
    }
    public async Task DeleteDrink(int id)
    {
        var responce = await Http.DeleteAsync($"/api/v1/Drink/drink/{id}?Key={SecretKey}");
        if(!responce.IsSuccessStatusCode)
            await JS.InvokeVoidAsync("showChange", "Не удалось удалить напиток!");
        else
        {
            drinks = await Http.GetFromJsonAsync<Drink[]>("/api/v1/Drink/drinks");
            this.ShouldRender();
        }
    }
}
